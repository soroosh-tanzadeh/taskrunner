// Code generated by mockery v2.40.1. DO NOT EDIT.

package runner

import (
	context "context"

	contracts "github.com/soroosh-tanzadeh/taskrunner/contracts"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockMessageQueue is an autogenerated mock type for the MockMessageQueue type
type MockMessageQueue struct {
	mock.Mock
}

// Ack provides a mock function with given fields: ctx, group, messageId
func (_m *MockMessageQueue) Ack(ctx context.Context, group string, messageId string) error {
	ret := _m.Called(ctx, group, messageId)

	if len(ret) == 0 {
		panic("no return value specified for Ack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, group, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Add provides a mock function with given fields: ctx, message
func (_m *MockMessageQueue) Add(ctx context.Context, message *contracts.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *contracts.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Consume provides a mock function with given fields: ctx, readBatchSize, blockDuration, group, consumerName, errorChannel, consumer
func (_m *MockMessageQueue) Consume(ctx context.Context, readBatchSize int, blockDuration time.Duration, group string, consumerName string, errorChannel chan error, consumer contracts.StreamConsumeFunc) {
	_m.Called(ctx, readBatchSize, blockDuration, group, consumerName, errorChannel, consumer)
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockMessageQueue) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Len provides a mock function with given fields:
func (_m *MockMessageQueue) Len() (int64, error) {
	return 0, nil
}

// Purge provides a mock function with given fields: ctx
func (_m *MockMessageQueue) Purge(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Purge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Receive provides a mock function with given fields: ctx, pullDuration, batchSize, group, consumerName
func (_m *MockMessageQueue) Receive(ctx context.Context, pullDuration time.Duration, batchSize int, group string, consumerName string) ([]contracts.Message, error) {
	ret := _m.Called(ctx, pullDuration, batchSize, group, consumerName)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 []contracts.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, int, string, string) ([]contracts.Message, error)); ok {
		return rf(ctx, pullDuration, batchSize, group, consumerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, int, string, string) []contracts.Message); ok {
		r0 = rf(ctx, pullDuration, batchSize, group, consumerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]contracts.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, int, string, string) error); ok {
		r1 = rf(ctx, pullDuration, batchSize, group, consumerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMessageQueue creates a new instance of MessageQueue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessageQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessageQueue {
	mock := &MockMessageQueue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
